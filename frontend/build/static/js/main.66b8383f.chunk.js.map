{"version":3,"sources":["serviceWorker.js","pages/Home.js","pages/Lobby.js","api/game-interface.js","api/contants.js","pages/Lobbies.js","api/lobby-interface.js","pages/CreateLobbyPage.js","index.js"],"names":["Boolean","window","location","hostname","match","HomePage","socket","username","localStorage","getItem","prompt","setItem","className","href","create","lobbyId","connectionId","a","url","path","join","requestConfig","method","headers","body","JSON","stringify","fetch","json","LobbyPage","useState","lobbyInfo","setLobbyInfo","lobbyName","players","creator","params","id","sessionStorage","io","on","emit","myPlayerId","replace","isAdmin","createGame","alert","error","gameId","Object","keys","map","key","icon","faCrown","onClick","LobbiesPage","lobbies","updateLobbies","ind","name","length","then","res","CreateLobbyPage","setLobbyName","createLobby","success","type","value","placeholder","onChange","e","target","disabled","ReactDOM","render","exact","component","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.66b8383f.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\n\n\nfunction HomePage() {\n\n  let username = localStorage.getItem('modi-username');\n\n  if (!username || username === '') {\n    username = prompt(\"Enter a username:\");\n    username && localStorage.setItem('modi-username', username);\n  }\n\n  return (\n    <div className=\"container-fluid\">\n      <h1 className=\"text-center\">Modi</h1>\n      <div className=\"white-line\"></div>\n\n      <div className=\"my-5\"></div>\n\n      <div className=\"d-flex justify-content-around\">\n        <a className=\"btn btn-secondary\" href=\"/create-lobby\">Create Lobby</a>\n        <a className=\"btn btn-primary\" href=\"/lobbies\">Join Lobby</a>\n      </div>\n    </div>\n  );\n}\n\nexport default HomePage;","import React, { useState } from 'react';\nimport io from 'socket.io-client';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCrown } from '@fortawesome/free-solid-svg-icons';\n\nimport { create } from '../api/game-interface';\n\nlet socket;\nfunction LobbyPage({ match }) {\n\n  const [lobbyInfo, setLobbyInfo] = useState({});\n  const { lobbyName, players, creator } = lobbyInfo;\n  const { id: lobbyId } = match.params;\n\n  if (!sessionStorage.getItem(`modi-${lobbyId}-username`)) {\n    sessionStorage.setItem(`modi-${lobbyId}-username`, prompt('Enter your username:'));\n  }\n\n  !socket && (socket = io(`/lobbies/${lobbyId}`));\n  socket.on('connect', () => {\n    socket.emit('join-attempt', sessionStorage.getItem(`modi-${lobbyId}-username`));\n    socket.on('updated-lobby', setLobbyInfo);\n    socket.on('player-id', (myPlayerId) => {\n      sessionStorage.setItem(`modi-${lobbyId}-playerId`, myPlayerId);\n      window.location.replace(`/games/${lobbyId}`);\n    });\n  });\n\n  const isAdmin = socket.id === creator;\n  const createGame = async () => {\n    if (!isAdmin) return alert('You are not the lobby admin!');\n    const { error, gameId } = await create(lobbyId, socket.id);\n    if (error) {\n      alert(error);\n    }\n  }\n\n  return (\n    <div className=\"container-fluid\">\n      <div className=\"card mt-3\">\n        <div className=\"card-header\">\n          {lobbyName && <h3 className=\"card-title\">{lobbyName}</h3>}\n        </div>\n        <div className=\"card-body\">\n          <ul className=\"list-group\">\n            {players && Object.keys(players).map((connectionId) => (\n              <li key={connectionId} className=\"list-group-item\">\n                {connectionId === creator && <FontAwesomeIcon icon={faCrown} />}\n                {\" \"}\n                {players[connectionId]}\n              </li>\n            ))}\n          </ul>\n        </div>\n        <div className=\"card-footer d-flex justify-content-between\">\n          <a className=\"btn btn-danger\" href=\"/lobbies\">&larr; Back</a>\n          {isAdmin && <button className=\"btn btn-primary\" onClick={createGame}>Start &rarr;</button>}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default LobbyPage;","import path from 'path';\nimport { API_URL } from './contants';\n\nexport const create = async (lobbyId, connectionId) => {\n  const url = path.join(API_URL, 'lobbies', lobbyId, 'make-game');\n  const requestConfig = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({ connectionId })\n  }\n\n  return await (await fetch(url, requestConfig)).json();\n}","export const API_URL = '/';","import React, { useState } from 'react';\nimport io from 'socket.io-client';\n\nlet socket;\n\nfunction LobbiesPage() {\n\n  const [lobbies, updateLobbies] = useState([]);\n\n  !socket && (socket = io('localhost:5000/lobbies'));\n\n  socket.on('connect', () => {\n    socket.on('lobbies-changed', updateLobbies);\n  });\n\n  return (\n    <div className=\"container-fluid\">\n      <div className=\"card mt-3\">\n        <div className=\"card-header\">\n          <h3 className=\"card-title\">Join Lobby:</h3>\n        </div>\n        <div className=\"card-body\">\n          <ol className=\"list-group\">\n            {lobbies.map(({ id, name }, ind) => (\n              <li key={id} className=\"list-group-item d-flex justify-content-between\">\n                {ind + 1}) {name}\n                <a className=\"btn btn-primary\" href={`/lobbies/${id}`}>Join &rarr;</a>\n              </li>\n            ))}\n            {!lobbies.length && (\n              <h6 className=\"text-muted\">There are no lobbies available to join. <a href=\"/create-lobby\">Create One</a></h6>\n            )}\n          </ol>\n        </div>\n        <div className=\"card-footer\">\n          <a className=\"btn btn-danger\" href=\"/\">&larr; Back</a>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default LobbiesPage;","import { API_URL } from './contants';\nimport path from 'path';\n\nexport const create = (lobbyName) => {\n  const url = path.join(API_URL, 'create-lobby');\n  const requestConfig = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ lobbyName })\n  }\n  return fetch(url, requestConfig).then(res => res.json());\n}\n\nexport const get = (lobbyId) => {\n  const url = path.join(API_URL, 'lobbies', lobbyId);\n  const requestConfig = {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n  }\n  return fetch(url, requestConfig).then(res => res.json());\n}","import React, { useState } from 'react';\nimport { create } from '../api/lobby-interface';\n\nconst CreateLobbyPage = () => {\n\n  const [lobbyName, setLobbyName] = useState('');\n\n  const createLobby = async () => {\n    const { success, error, lobbyId } = await create(lobbyName);\n    if (error)\n      return alert(`Error: ${error}`);\n    window.location.replace(`/lobbies/${lobbyId}`);\n  }\n\n  return (\n    <div className=\"container-fluid\">\n      <div className=\"card mt-3\">\n        <div className=\"card-header\">\n          <h3 className=\"card-title\">Create Lobby:</h3>\n        </div>\n        <div className=\"card-body\">\n          <div className=\"input-group\">\n            <input className=\"form-control\"\n              type=\"text\"\n              value={lobbyName}\n              placeholder=\"Enter lobby name...\"\n              onChange={(e) => setLobbyName(e.target.value)}\n            />\n            <div className=\"input-group-append\">\n              <button className=\"btn btn-primary\" onClick={createLobby} disabled={lobbyName === ''}>Create &rarr;</button>\n            </div>\n          </div>\n          <div className=\"card-footer\">\n            <a className=\"btn btn-danger\" href=\"/\">&larr; Back</a>\n          </div>\n        </div>\n      </div>\n    </div >\n  );\n}\n\nexport default CreateLobbyPage;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter, Route } from 'react-router-dom';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport HomePage from './pages/Home';\nimport LobbyPage from './pages/Lobby';\nimport LobbiesPage from './pages/Lobbies';\nimport CreateLobbyPage from './pages/CreateLobbyPage';\n\nReactDOM.render(\n\n  <BrowserRouter>\n    <Route exact path=\"/\" component={HomePage} />\n    <Route exact path=\"/create-lobby\" component={CreateLobbyPage} />\n    <Route exact path=\"/lobbies\" component={LobbiesPage} />\n    <Route path=\"/lobbies/:id\" component={LobbyPage} />\n  </BrowserRouter>,\n\n  document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}